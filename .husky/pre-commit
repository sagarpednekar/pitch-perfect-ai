#!/bin/bash
# .husky/pre-commit - Advanced pre-commit hook

set -e

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_warning "No JavaScript/TypeScript files staged for commit"
    exit 0
fi

print_status "Found ${#STAGED_FILES[@]} staged file(s)"

# Run lint-staged
print_status "Running lint-staged..."
if npx lint-staged; then
    print_success "Lint-staged completed successfully"
else
    print_error "Lint-staged failed"
    exit 1
fi

# Type checking (only for TypeScript files)
TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.tsx?$' || true)
if [ ! -z "$TS_FILES" ]; then
    print_status "Running TypeScript type checking..."
    if npm run type-check; then
        print_success "Type checking passed"
    else
        print_error "Type checking failed"
        exit 1
    fi
fi

# Check for console.log statements (warning only)
print_status "Checking for console.log statements..."
CONSOLE_LOGS=$(echo "$STAGED_FILES" | xargs grep -l "console\.log" 2>/dev/null || true)
if [ ! -z "$CONSOLE_LOGS" ]; then
    print_warning "Console.log statements found in:"
    echo "$CONSOLE_LOGS" | while read file; do
        echo "  - $file"
    done
    print_warning "Consider removing console.log statements before committing"
fi

# Check for TODO/FIXME comments
print_status "Checking for TODO/FIXME comments..."
TODO_COMMENTS=$(echo "$STAGED_FILES" | xargs grep -l "TODO\|FIXME" 2>/dev/null || true)
if [ ! -z "$TODO_COMMENTS" ]; then
    print_warning "TODO/FIXME comments found in:"
    echo "$TODO_COMMENTS" | while read file; do
        echo "  - $file"
    done
fi

# Check bundle size (if analyze script exists)
if npm run --silent 2>/dev/null | grep -q "analyze"; then
    print_status "Analyzing bundle size..."
    # This would require a custom script to check bundle size
    # npm run analyze:size || print_warning "Bundle size check skipped"
fi


print_success "All pre-commit checks passed! ✨"